import logging
import sys
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import ContextTypes
from openai import OpenAI, RateLimitError

from src.config import AppConfig
from src.history import ensure_history, append_history_entry, build_prompt


async def ask_ai(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_text = " ".join(context.args).strip()
    if not user_text and update.message and update.message.reply_to_message:
        user_text = (update.message.reply_to_message.text or "").strip()

    if not user_text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ai <–∑–∞–ø—Ä–æ—Å>")
        return

    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id,
        action=ChatAction.TYPING,
    )

    history = ensure_history(update, context)
    append_history_entry(
        history,
        role="user",
        text=user_text,
        user=update.effective_user,
    )

    input_history = build_prompt(list(history))

    llm: OpenAI = context.bot_data["llm_client"]
    app_config: AppConfig = context.bot_data["app_config"]

    try:
        response = llm.responses.create(
            model=app_config.llm_model,
            input=input_history,
            instructions=
            """
–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É —é–∑–µ—Ä–∞–º–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ.
–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç–µ–±—è —Å–ø—Ä–æ—Å–∏–ª–∏.
–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞—Ç.
–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–π –∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ù–∞—á–Ω–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ —á–µ–∫-–ª–∏—Å—Ç–∞ —à–∞–≥–æ–≤: (1) –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–∞, (2) –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, (3) —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, (4) –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –∏ —É–º–µ—Å—Ç–Ω–æ—Å—Ç–∏, (5) –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∫—Ä–∞—Ç–∫–æ –ø—Ä–æ–≤–µ—Ä—å –ø–æ–ª–Ω–æ—Ç—É –∏ —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –∏, –µ—Å–ª–∏ –Ω–∞–¥–æ, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –µ–≥–æ.
    """,
        )
        answer = response.output_text
    except RateLimitError:
        await update.message.reply_text('‚ùåüí∏ Kurwa, a –¥–µ–Ω—è–≥ —Ç–æ –±–æ–ª—å—à–µ –Ωi–º–∞...')
        return
    except Exception as e:
        logging.error("OpenAI error:", e, file=sys.stderr)
        await update.message.reply_text('–ë–ª—è—è—è—è—è—è, —á–µ—Ç –ø—Ä–æ–±–ª–µ–º–∞ –∫–∞–∫–∞—è —Å openai :(')
        return

    append_history_entry(
        history,
        role="assistant",
        text=answer,
        user=None,
    )

    await update.message.reply_text(answer)
