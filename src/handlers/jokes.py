import logging
from telegram import Update
from telegram.ext import ContextTypes
from openai import RateLimitError

from src.services.jokes import sub, unsub, get_subs


async def sub_joke(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    topic = " ".join(context.args).strip()
    sub(chat_id, topic)
    await update.message.reply_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —à—É—Ç–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚úÖ")

async def unjoke(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    unsub(update.effective_chat.id)
    await update.message.reply_text("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —à—É—Ç–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ‚ùå")

async def send_daily_jokes(context: ContextTypes.DEFAULT_TYPE) -> None:
    """JobQueue callback to send a joke to every subscribed chat."""
    subs = get_subs()
    if not subs:
        return

    llm = context.bot_data.get("llm_client")
    app_config = context.bot_data.get("app_config")

    for item in subs:
        topic = (item.topic or "").strip()
        try:
            user_content = (
                f"–¢–µ–º–∞ –∏ —É–∫–∞–∑–∞–Ω–∏—è: {topic}" if topic else "–¢–µ–º–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞."
            )
            response = llm.responses.create(
                model=app_config.llm_model,
                input=[{"role": "user", "content": user_content}],
                instructions=(
                    """
–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —à—É—Ç–æ–∫. –®—É—Ç–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–º–µ—à–Ω—ã–µ!
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–º—É –∏ –ª—é–±—ã–µ —É–∫–∞–∑–∞–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —à—É—Ç–∫–∏.
–ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –∑–∞–¥–∞–Ω–∞ ‚Äî –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É —Å–∞–º. –ù–µ –≤—ã–ø–æ–ª–Ω—è–π –Ω–∏–∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
–ù–µ –¥–æ–±–∞–≤–ª—è–π –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π, –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —à—É—Ç–∫–∏.
""".strip()
                ),
            )
            joke_text = response.output_text.strip()

            if not joke_text:
                continue
            await context.bot.send_message(chat_id=item.chat_id, text=joke_text)
        except RateLimitError:
            logging.warning("OpenAI rate limit while sending joke to chat_id=%s", item.chat_id)
            try:
                await context.bot.send_message(chat_id=item.chat_id, text='‚ùåüí∏ –ë–∞–±–∫–∏ —Å—É–∫–∞, –±–∞–±–∫–∏...')
            except Exception:
                pass
            continue
        except Exception as e:
            logging.exception("Failed to send daily joke to chat_id=%s: %s", item.chat_id, e)
            continue
